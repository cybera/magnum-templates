heat_template_version: 2014-10-16

description: >
  This is a nested stack that defines a single Kubernetes minion, This stack is
  included by an AutoScalingGroup resource in the parent template
  (kubecluster.yaml).

parameters:

  name:
    type: string
    description: server name

  server_image:
    type: string
    description: glance image used to boot the server

  minion_flavor:
    type: string
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server

  external_network:
    type: string
    description: uuid/name of a network to use for floating ip addresses

  kube_allow_priv:
    type: string
    description: >
      whether or not kubernetes should permit privileged containers.
    constraints:
      - allowed_values: ["true", "false"]

  docker_volume_size:
    type: number
    description: >
      size of a cinder volume to allocate to docker for container/image
      storage

  docker_volume_type:
    type: string
    description: >
      type of a cinder volume to allocate to docker for container/image
      storage

  docker_storage_driver:
    type: string
    description: docker storage driver name
    default: "devicemapper"

  tls_disabled:
    type: boolean
    description: whether or not to enable TLS

  verify_ca:
    type: boolean
    description: whether or not to validate certificate authority

  kubernetes_port:
    type: number
    description: >
      The port which are used by kube-apiserver to provide Kubernetes
      service.

  cluster_uuid:
    type: string
    description: identifier for the cluster this template is generating

  magnum_url:
    type: string
    description: endpoint to retrieve TLS certs from

  prometheus_monitoring:
    type: boolean
    description: >
      whether or not to have the node-exporter running on the node

  kube_master_ip:
    type: string
    description: IP address of the Kubernetes master server.

  etcd_server_ip:
    type: string
    description: IP address of the Etcd server.

  fixed_network:
    type: string
    description: Network from which to allocate fixed addresses.

  fixed_subnet:
    type: string
    description: Subnet from which to allocate fixed addresses.

  network_driver:
    type: string
    description: network driver to use for instantiating container networks

  flannel_network_cidr:
    type: string
    description: network range for flannel overlay network

  wait_condition_timeout:
    type: number
    description : >
      timeout for the Wait Conditions

  registry_enabled:
    type: boolean
    description: >
      Indicates whether the docker registry is enabled.

  registry_port:
    type: number
    description: port of registry service

  swift_region:
    type: string
    description: region of swift service

  registry_container:
    type: string
    description: >
      name of swift container which docker registry stores images in

  registry_insecure:
    type: boolean
    description: >
      indicates whether to skip TLS verification between registry and backend storage

  registry_chunksize:
    type: number
    description: >
      size fo the data segments for the swift dynamic large objects

  secgroup_kube_minion_id:
    type: string
    description: ID of the security group for kubernetes minion.

  volume_driver:
    type: string
    description: volume driver to use for container storage

  region_name:
    type: string
    description: A logically separate section of the cluster

  username:
    type: string
    description: >
      user account

  password:
    type: string
    description: >
      user password, not set in current implementation, only used to
      fill in for Kubernetes config file
    hidden: true

  http_proxy:
    type: string
    description: http proxy address for docker

  https_proxy:
    type: string
    description: https proxy address for docker

  no_proxy:
    type: string
    description: no proxies for docker

  kube_tag:
    type: string
    description: tag of the k8s containers used to provision the kubernetes cluster

  flannel_tag:
    type: string
    description: tag of the flannel system containers

  kube_version:
    type: string
    description: version of kubernetes used for kubernetes cluster

  trustee_domain_id:
    type: string
    description: domain id of the trustee

  trustee_user_id:
    type: string
    description: user id of the trustee

  trustee_username:
    type: string
    description: username of the trustee

  trustee_password:
    type: string
    description: password of the trustee
    hidden: true

  trust_id:
    type: string
    description: id of the trust which is used by the trustee
    hidden: true

  auth_url:
    type: string
    description: >
      url for keystone, must be v2 since k8s backend only support v2
      at this point

  insecure_registry_url:
    type: string
    description: insecure registry url

  container_infra_prefix:
    type: string
    description: >
      prefix of container images used in the cluster, kubernetes components,
      kubernetes-dashboard, coredns etc

  dns_service_ip:
    type: string
    description: >
      address used by Kubernetes DNS service

  dns_cluster_domain:
    type: string
    description: >
      domain name for cluster DNS

  openstack_ca:
    type: string
    description: The OpenStack CA certificate to install on the node.

  nodes_server_group_id:
    type: string
    description: ID of the server group for kubernetes cluster nodes.

  availability_zone:
    type: string
    description: >
      availability zone for master and nodes
    default: ""

  pods_network_cidr:
    type: string
    description: Configure the IP pool/range from which pod IPs will be chosen

  kubelet_options:
    type: string
    description: >
      additional options to be passed to the kubelet

  kubeproxy_options:
    type: string
    description: >
      additional options to be passed to the kube proxy

resources:

  minion_wait_handle:
    type: OS::Heat::WaitConditionHandle

  minion_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: kube-minion
    properties:
      handle: {get_resource: minion_wait_handle}
      timeout: {get_param: wait_condition_timeout}

  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  #

  write_heat_params:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          # JT
          template: {get_file: fragments/write-heat-params.yaml}
          params:
            $PROMETHEUS_MONITORING: {get_param: prometheus_monitoring}
            $KUBE_ALLOW_PRIV: {get_param: kube_allow_priv}
            $KUBE_MASTER_IP: {get_param: kube_master_ip}
            $KUBE_API_PORT: {get_param: kubernetes_port}
            $KUBE_NODE_PUBLIC_IP: {get_attr: [kube_minion_floating, floating_ip_address]}
            $KUBE_NODE_IP: {get_attr: [kube_minion_eth0, fixed_ips, 0, ip_address]}
            $ETCD_SERVER_IP: {get_param: etcd_server_ip}
            $DOCKER_VOLUME: {get_resource: docker_volume}
            $DOCKER_VOLUME_SIZE: {get_param: docker_volume_size}
            $DOCKER_STORAGE_DRIVER: {get_param: docker_storage_driver}
            $NETWORK_DRIVER: {get_param: network_driver}
            $REGISTRY_ENABLED: {get_param: registry_enabled}
            $REGISTRY_PORT: {get_param: registry_port}
            $SWIFT_REGION: {get_param: swift_region}
            $REGISTRY_CONTAINER: {get_param: registry_container}
            $REGISTRY_INSECURE: {get_param: registry_insecure}
            $REGISTRY_CHUNKSIZE: {get_param: registry_chunksize}
            $TLS_DISABLED: {get_param: tls_disabled}
            $VERIFY_CA: {get_param: verify_ca}
            $CLUSTER_UUID: {get_param: cluster_uuid}
            $MAGNUM_URL: {get_param: magnum_url}
            $USERNAME: {get_param: username}
            $PASSWORD: {get_param: password}
            $VOLUME_DRIVER: {get_param: volume_driver}
            $REGION_NAME: {get_param: region_name}
            $HTTP_PROXY: {get_param: http_proxy}
            $HTTPS_PROXY: {get_param: https_proxy}
            $NO_PROXY: {get_param: no_proxy}
            $KUBE_TAG: {get_param: kube_tag}
            $FLANNEL_TAG: {get_param: flannel_tag}
            $KUBE_VERSION: {get_param: kube_version}
            $WAIT_CURL: {get_attr: [minion_wait_handle, curl_cli]}
            $TRUSTEE_USER_ID: {get_param: trustee_user_id}
            $TRUSTEE_PASSWORD: {get_param: trustee_password}
            $TRUST_ID: {get_param: trust_id}
            $AUTH_URL: {get_param: auth_url}
            $INSECURE_REGISTRY_URL: {get_param: insecure_registry_url}
            $CONTAINER_INFRA_PREFIX: {get_param: container_infra_prefix}
            $DNS_SERVICE_IP: {get_param: dns_service_ip}
            $DNS_CLUSTER_DOMAIN: {get_param: dns_cluster_domain}
            $KUBELET_OPTIONS: {get_param: kubelet_options}
            $KUBEPROXY_OPTIONS: {get_param: kubeproxy_options}
            # JT
            $KUBE_NODE_IPV6: {get_attr: [kube_minion_eth0, fixed_ips, 1, ip_address]}

  # MF
  # install_openstack_ca:
  #   type: OS::Heat::SoftwareConfig
  #   properties:
  #     group: ungrouped
  #     config:
  #       str_replace:
  #         params:
  #           $OPENSTACK_CA: {get_param: openstack_ca}
  #         # JT
  #         template: {get_file: ../common/fragments/atomic-install-openstack-ca.sh}

  # JT
  install_docker:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/install-docker.sh}

  remove_docker_key:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/remove-docker-key.sh}

  write_kube_os_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/write-kube-os-config.sh}

  make_cert:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/make-cert-client.sh}

  configure_docker_storage:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # MF
      # config:
      #   str_replace:
      #     params:
      #       # JT
      #       $configure_docker_storage_driver: {get_file: ../common/fragments/configure_docker_storage_driver_atomic.sh}
      #     # JT
      #     template: {get_file: ../common/fragments/configure-docker-storage.sh}
      config: {get_file: fragments/configure-docker-storage.sh}

  add_docker_daemon_options:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/add-docker-daemon-options.sh}

  configure_docker_registry:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: ../common/fragments/configure-docker-registry.sh}

  configure_kubernetes_minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/configure-kubernetes-minion.sh}

  network_service:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/network-service.sh}

  enable_services:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/enable-services-minion.sh}

  enable_docker_registry:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: ../common/fragments/enable-docker-registry.sh}

  enable_node_exporter:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/enable-node-exporter.sh}

  minion_wc_notify:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash -v
            if [ "verify_ca" == "True" ]; then
                VERIFY_CA=""
            else
                VERIFY_CA="-k"
            fi
            wc_notify $VERIFY_CA --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: {get_attr: [minion_wait_handle, curl_cli]}
            verify_ca: {get_param: verify_ca}

  # disable_selinux:
  #   type: OS::Heat::SoftwareConfig
  #   properties:
  #     group: ungrouped
  #     # JT
  #     config: {get_file: fragments/disable-selinux.sh}

  add_proxy:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      # JT
      config: {get_file: fragments/add-proxy.sh}

  kube_minion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        # MF
        #- config: {get_resource: install_openstack_ca}
        #- config: {get_resource: disable_selinux}
        - config: {get_resource: write_heat_params}
        - config: {get_resource: configure_docker_storage}
        - config: {get_resource: install_docker}
        - config: {get_resource: remove_docker_key}
        - config: {get_resource: write_kube_os_config}
        - config: {get_resource: make_cert}
        - config: {get_resource: configure_docker_registry}
        - config: {get_resource: configure_kubernetes_minion}
        - config: {get_resource: network_service}
        - config: {get_resource: add_proxy}
        - config: {get_resource: enable_services}
        - config: {get_resource: enable_node_exporter}
        - config: {get_resource: enable_docker_registry}
        - config: {get_resource: minion_wc_notify}

  ######################################################################
  #
  # a single kubernetes minion.
  #

  # do NOT use "_" (underscore) in the Nova server name
  # it creates a mismatch between the generated Nova name and its hostname
  # which can lead to weird problems
  kube-minion:
    type: OS::Nova::Server
    properties:
      name: {get_param: name}
      image: {get_param: server_image}
      flavor: {get_param: minion_flavor}
      key_name: {get_param: ssh_key_name}
      user_data_format: RAW
      user_data: {get_resource: kube_minion_init}
      networks:
        - port: {get_resource: kube_minion_eth0}
      scheduler_hints: { group: { get_param: nodes_server_group_id }}
      availability_zone: {get_param: availability_zone}

  kube_minion_eth0:
    type: OS::Neutron::Port
    properties:
      network: {get_param: fixed_network}
      security_groups:
        - get_param: secgroup_kube_minion_id
      # JT
      #fixed_ips:
      #  - subnet: {get_param: fixed_subnet}
      #allowed_address_pairs:
      #  - ip_address: {get_param: pods_network_cidr}
      #replacement_policy: AUTO

  # JT
  # note: the way Magnum::Optional::KubeMinion::Neutron::FloatingIP is configured,
  # a floating IP will never be used for a node.
  kube_minion_floating:
    type: Magnum::Optional::KubeMinion::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: kube_minion_eth0}

  ######################################################################
  #
  # docker storage.  This allocates a cinder volume and attaches it
  # to the minion.
  #

  docker_volume:
    type: Magnum::Optional::Cinder::Volume
    properties:
      size: {get_param: docker_volume_size}
      volume_type: {get_param: docker_volume_type}

  docker_volume_attach:
    type: Magnum::Optional::Cinder::VolumeAttachment
    properties:
      instance_uuid: {get_resource: kube-minion}
      volume_id: {get_resource: docker_volume}
      mountpoint: /dev/vdb

outputs:

  kube_minion_ip:
    value: {get_attr: [kube_minion_eth0, fixed_ips, 0, ip_address]}
    description: >
      This is the "public" IP address of the Kubernetes minion node.

  # JT
  kube_minion_ipv6:
    value: {get_attr: [kube_minion_eth0, fixed_ips, 1, ip_address]}
    description: >
      This is the IPv6 address of the Kubernetes minion node.

  kube_minion_external_ip:
    value: {get_attr: [kube_minion_floating, floating_ip_address]}
    description: >
      This is the "public" IP address of the Kubernetes minion node.

  OS::stack_id:
    value: {get_param: "OS::stack_id"}
    description: >
      This is a id of the stack which creates from this template.
